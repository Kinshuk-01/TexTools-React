{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlhtmlfor","placeholder","Alert","style","height","alert","class","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","newText","showAlert","disabled","length","document","getElementById","select","navigator","clipboard","writeText","split","join","filter","element","defaultProps","aboutBtn","App","setMode","setAlert","message","setTimeout","body","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.de585416.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\"\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} sticky-top`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" href=\"/about\">{props.aboutBtn}</Link>\r\n            </li> */}\r\n          </ul>\r\n          <div className={`form-check form-switch mx-3 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n            <label className=\"form-check-label\" htmlhtmlfor=\"flexSwitchCheckDefault\">{props.mode === 'light' ? 'Dark Mode' : 'Light Mode'}</label>\r\n          </div>\r\n          <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n//Proptypes-->to set a particular data type of props\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutBtn: PropTypes.string.isRequired\r\n}\r\n\r\n//Default Props--> to set default value of props\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  aboutBtn: \"Button\"\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize =(word) =>{\r\n        const lower = word.toLowerCase(); \r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '40px'}}>\r\n            {props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`}role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>}\r\n        </div>    \r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text converted to uppercase successfully.\",\"success\");\r\n    }\r\n    \r\n    const handleLowClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Text converted to lowercase successfully.\",\"success\");\r\n    }\r\n    \r\n    const handleChange = (event) =>{\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    const handleClear = () =>{\r\n        setText(\"\");\r\n        props.showAlert(\"Text cleared successfully.\",\"success\");\r\n    }\r\n    \r\n    const handleCopy = () =>{\r\n        let text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied to keyboard successfully.\",\"success\");\r\n    }\r\n    \r\n    const handleSpaces = () =>{\r\n        let newText = text.split(/[ ] + /);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed extra spaces successfully.\",\"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <h2>{props.heading}</h2>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleChange} id=\"mybox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick} disabled={text.length===0}>Convert to Upper case</button>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={handleClear} disabled={text.length===0}>Clear All</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick} disabled={text.length===0}>Convert to Lower case</button>\r\n            <button className=\"btn btn-outline-primary mx-1\" onClick={handleCopy} disabled={text.length===0}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleSpaces} disabled={text.length===0}>Remove Extra spaces</button>\r\n        </div>\r\n        <div className=\"container my-4\">\r\n            <h3>Your Text Summary</h3>\r\n            <p> <b>• Number of words:</b> {text.split(\" \").filter((element)=>{return element.length!==0}).length}</p>\r\n            <p> <b>• Number of Characters:</b> {text.length}</p>\r\n            <p> <b>• Minutes to read:</b> {0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} mins</p>\r\n\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:\"Nothing to Preview!!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import './App.css';\nimport Navbar from './components/Navbar'; \nimport Alert from './components/Alert'; \nimport TextForm from './components/TextForm'; \n// import About from './components/About'; \nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message, type) =>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 2000);\n  }\n\n  //DARK MODE\n  const toggleMode =() =>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='rgb(14,14,14)';\n      document.body.style.color='white';\n      showAlert('Dark Mode has been enabled successfully', 'success');\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      document.body.style.color='black';\n      showAlert('Light Mode has been enabled successfully', 'success');\n    }\n  }\n  \n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TexTools\" aboutBtn=\"About\" mode={mode} toggleMode={toggleMode}/>\n    {/* <Navbar/> */}\n\n    <Alert alert={alert}/>\n\n    {/* <Switch>\n        <Route exact path=\"/about\">\n          <div className=\"container my-5\">\n            <About mode={mode}/>\n          </div> \n        </Route> */}\n\n        {/* <Route exact path=\"/\"> */}\n          <div className=\"container my-4\">\n            <TextForm showAlert={showAlert} heading=\"Enter you text to analyze below:\" />\n          </div>\n        {/* </Route>\n    </Switch>\n\n    </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}